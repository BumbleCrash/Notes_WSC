# EKT-RTR

## FRR

frr version 8.4.4
frr defaults traditional
hostname ekt-rtr
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
interface ens33
 ip ospf authentication message-digest
 ip ospf message-digest-key 1 md5 P@ssw0rd
 no ip ospf passive
exit
!
interface gre1
 ip ospf authentication message-digest
 ip ospf message-digest-key 2 md5 P@ssw0rd
 ip ospf network broadcast
 no ip ospf passive
exit
!
interface gre2
 ip ospf authentication message-digest
 ip ospf message-digest-key 2 md5 P@ssw0rd
 ip ospf network broadcast
 no ip ospf passive
exit
!
router ospf
 passive-interface default
 network 10.8.8.0/30 area 2
 network 10.6.6.0/30 area 2
 network 88.8.8.0/27 area 1
 network 192.168.2.0/24 area 2
 area 1 authentication message-digest
 area 2 authentication message-digest
exit
!


### SITE!

import os
import hashlib
import sqlite3
import subprocess
import datetime
from flask import *

app = Flask(__name__, template_folder='templates')

app.config['DATABASE'] = 'database.db'

app.secret_key=os.urandom(24)

def get_db():
        if 'db' not in g:
                g.db = sqlite3.connect(app.config['DATABASE'])
                g.db.row_factory = sqlite3.Row
        return g.db


@app.teardown_appcontext
def close_db(error):
        db = getattr(g, 'db', None)
        if db is not None:
                db.close()


@app.route('/', methods=['GET'])
def hello():
        return render_template('hello.html')


@app.route('/admin', methods=['GET'])
def admin():
        if 'username' in session:
                if session['username'] == 'admin':
                        return render_template('admin.html')
                if session['username'] == 'user':
                        return redirect(url_for('login'))
        return redirect(url_for('login'))

@app.route('/user', methods=['GET'])
def user():
        if 'username' in session:
                if session['username'] == 'admin':
                        return redirect(url_for('login'))
                if session['username'] == 'user':
                        return render_template('user.html')
        return redirect(url_for('login'))


@app.route('/login', methods=['GET', 'POST'])
def login():
        if request.method == 'POST':
                username = request.form['username']
                password = request.form['password']
                hashed_pass = hashlib.sha1(password.encode('utf-8')).hexdigest()


                db = get_db()
                cursor = db.cursor()
                cursor.execute("SELECT password FROM users WHERE username = ?", (username,))
                rows = cursor.fetchall()
                cursor.close()
                #print(rows[0][0])
                if rows:
                        if rows[0][0] == hashed_pass:
                                session['username'] = username
                                if username == 'admin':
                                        return redirect(url_for('admin'))
                                if username == 'user':
                                        return redirect(url_for('user'))
                with open('app.log', 'a') as f:
                        f.write(str(datetime.datetime.now()).split('.')[0]+' Неудачная попытка входа под пользователем '+username+'. Адрес>
                return render_template('login.html', error='Неудачный вход. Администратор оповещён.')
        return render_template('login.html')


if __name__ == '__main__':
        app.run(debug=False, host='0.0.0.0', port=80)




### INTERFACES

auto ens33
iface ens33 inet static
        address 88.8.8.27
        netmask 255.255.255.224
        gateway 88.8.8.1

auto ens37
iface ens37 inet static
        address 192.168.2.1
        netmask 255.255.255.0


auto gre1
iface gre1 inet static
        address 10.6.6.2
        netmask 255.255.255.252
        mtu 1420

        pre-up ip tunnel add gre1 mode gre remote 200.100.100.20 local 88.8.8.27 ttl 225
        pre-up ip link set up gre1
        post-down ip tunnel del gre1

auto gre2
iface gre2 inet static
        address 10.8.8.2
        netmask 255.255.255.252
        mtu 1420

        pre-up ip tunnel add gre2 mode gre remote 100.200.100.20 local 88.8.8.27 ttl 225
        pre-up ip link set up gre2
        post-down ip tunnel del gre2



